/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     simpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         20; //100; //1000;     #TODO: Review how many steps to perform

deltaT          1;

writeControl    timeStep;

writeInterval   1;

purgeWrite      1; // It will keep the last xx saved solutions

writeFormat     binary;

writePrecision  6; // It will save the solution in ascii format (writeFormat) with a precision of 8 digits (writePrecision)

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true; // And as the option runTimeModifiable is on (true), we can modify all these entries while we are running the simulation.

functions
{
    #includeFunc "residuals"
    #includeFunc "surfaces"

    yPlus1
    {
        // Mandatory entries (unmodifiable)
        type            yPlus;
        libs            (fieldFunctionObjects);
        patches         (wall);
        timeStart       0;
        timeEnd         1000;
        writeControl    timeStep;
        writeInterval   1;
        writeToFile     true;
        executeControl  timeStep;
        executeInterval 1;
        // Optional (inherited) entries
        //writeFields     yes;
        //writePrecision  6;
        //useUserTime     true;
        //enabled         true;
        //log             true;
    }

    avgsurf_in
    {
        type            surfaceFieldValue;
        libs            (fieldFunctionObjects);
        log             on;
        enabled         true;
        writeControl    timeStep;
        writeInterval   20;
        writeFields     false;
        surfaceFormat   vtk;
        writeArea       false;
        regionType      sampledSurface;
        name            avgsurf1;
        sampledSurfaceDict
           {
              type        plane;
              point       (0.043 0.0175 0.067); //in
              normal      (0 1 0);
           }
        operation       areaAverage;
        postOperation   none; //mag;
        fields
        (
	      p
	      U
        );
    }
    avgsurf_out
    {
        type            surfaceFieldValue;
        libs            (fieldFunctionObjects);
        log             on;
        enabled         true;
        writeControl    timeStep;
        writeInterval   20;
        writeFields     false;
        writeArea       false;
        surfaceFormat   vtk;
        regionType      sampledSurface;
        name            avgsurf2;
        sampledSurfaceDict
           {
              type       plane;
              point     (0.0404 0.0855 0.020);
              normal    (0 0 1);
           }
        operation       areaAverage;
        postOperation   none;
        fields
        (
	      p
	      U
        );
    }

    probes
    {
    type    probes;
    libs    (sampling);
    name    probes;
    writeControl   timeStep;
    writeInterval  20;
    fields
    (
        p
        U
    );
    probeLocations
    (   
        // STL geometry generated directly from NIfTI
        (0.045758636 0.004933601 0.068216125) //in1
        (0.032608170 0.005303648 0.067978516) //in2
        (0.038724266 0.085368500 0.016999920) //out

        // p5t1 geometry
        // (0.043 0.0175 0.067) //in
        // (0.0351 0.0175 0.066) //in
        // (0.0404 0.0855 0.0117) //out
    );
    }

    avgInlets
    {
        type            surfaceFieldValue;
        libs            (fieldFunctionObjects);
        enabled         yes;
        writeControl    timeStep;
        writeInterval   20;
        log             yes;
        writeFields     off;
        regionType      patch;
        name            inlet;
        operation       weightedAverage;
        weightField     phi;
        fields
        (
            U
            p
        );
    }

    avgOutlets
    {
        type            surfaceFieldValue;
        libs            (fieldFunctionObjects);
        writeControl    timeStep;
        writeInterval   20;
        log             yes;
        writeFields     no;
        regionType      patch;
        name            outlet;
        operation       weightedAverage;
        weightField     phi;

        fields
        (
            U
            p
        );
    }
}

// ************************************************************************* //

