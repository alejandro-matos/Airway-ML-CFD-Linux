/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//troubleshoot =
// 1. According to the quality of your mesh, you will need to change the blending factor of the laplacianSchemes and snGradSchemes keywords.
// 2. For gradient discretization the leastSquares method is more accurate. But we have found that it is a little bit oscillatory in tetrahedral meshes
// 3. If during the simulation the turbulence quantities become unbounded, you can safely change the discretization scheme to upwind. After all, turbulence is diffusion.
// 4. To keep time diffusion to a minimum, use a CFL number less than 2, and preferably below 1.

ddtSchemes //d(phi)/dt
{
    default         steadyState;

    //options = backward, Euler, bounded, localEuler, CoEuler, SLTS, CrankNicolson, steadyState

    //default   CrankNicolson 0.5; //0.5 = blending factor

//Scheme	Description
//Euler	first-order, bounded, implicit
//local Euler	local time step, first order, bounded, implicit
//Crank Nicholson ψ	second-order, bounded, implicit
//backward	second-order, implicit
//steady state	does not solve for time derivatives
// The first order bounded, ‘Euler’ is the most robust while the second-order ones are more accurate. Backward is a second-order time-differentiation scheme that gives higher accuracy but may reduce stability

}

gradSchemes //grad(phi)
{
    default         cellLimited<Venkatakrishnan> Gauss linear 1.0;
    grad(U)         cellLimited<Venkatakrishnan> Gauss linear 1.0; // 1 if value is oscillatory

    // options = edgeCellsLeastSquares, fourth, Gauss, leastSquares, pointCellsLeastSquares // All of them are at least second order accurate
    // leastSquares (no interpolation method information required)

    // gradient limiter schemes = cellLimited, cellMDLimited, faceLimited, faceMDLimited ()

    // You can use the cubic or Venkatakrishnan method only with the cellLimited option = cellLimited<cubic>, cellLimited<Venkatakrishnan>, ...minmod

    // grad(U)  cellMDLimited Gauss linear 1.0;
    // Gauss = Gradient computation method
    // linear =  Cell-center to face-center interpolation method
    // cellMDLimited = Gradient limiter scheme
    // 0 is equivalent to turning off the gradient limiter, By setting the blending factor equal to 1 the limiter is always on. You gain stability but you give up accuracy (due to gradient clipping). You can use limiters with all gradient discretization schemes

//Gauss <interpolationScheme>	= second-order, Gaussian integration
//least squares	 = second-order, least squares
//fourth gradient	= fourth-order, least squares
//celllimited <gradScheme> = cell limited version of one of the above schemes

// ‘Gauss’ represents the standard finite volume discretization using the Gaussian integration that requires the interpolation from cell centers to face centers. The recommended types are the second-order accurate ‘Gauss Linear’ or ‘Least squares’ schemes.

// For better stability and robustness, the ‘cellLimited’ versions of both can be used. The ‘Limiter coefficient’ of 1.0 means full boundedness/limiting of values while 0 means no limiting.

}

divSchemes // div(phi)
{
    default         none;
    div(phi,U)      Gauss linearUpwind grad(U);
    turbulence      Gauss linearUpwind default; //bounded Gauss limitedLinear 1;
    div(phi,k)      $turbulence;
    div(phi,omega)  $turbulence;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;

    // options =
    // upwind: first order accurate.
    // linearUpwind: second order accurate, bounded.
    // linearUpwindV: second order accurate, bounded, formulation for vector fields.
    // linear: second order accurate, unbounded.
    // vanLeer: TVD, second order accurate, bounded.
    // Minmod: TVD, second order accurate, bounded (alternative to vanLeer).
    // limitedLinear: second order accurate, unbounded, but more stable than pure linear. Recommended for LES simulations (kind of similar to the Fromm method).
    // LUST: blended 75% linear and 25% linearUpwind scheme.
    //div(phi,U)  Gauss linearUpwind  grad(U); // When you use linearUpwind and LUST for div(phi,U), you need to tell OpenFOAM how to compute the velocity gradient or grad(U), Same applies for scalars (e.g., k, epsilon, omega, T, e, h) or other vector fields.

    // Gauss upwind, cellLimited leastSquares 1.0, bounded Gauss limitedLinear 1, bounded Gauss LUST grad(U);

//Gauss upwind: first-order bounded, generally robust but compromises accuracy
//Gauss linear: second-order, unbounded. Accurate but not robust
//Gauss linear upwind: second-order, upwind-biased, unbounded, that requires discretization of the velocity gradient to be specified.
//Gauss limited linear: a linear scheme that limits towards upwind in regions of rapidly changing gradient; requires a coefficient, where 1 is the strongest limiting, and shifting towards linear as the coefficient tends to 0.
//Gauss linear upwind v ∇u: second-order, upwind, bounded, is a good choice for stable second-order linear schem

}

laplacianSchemes //grad.grad(phi)
{
    default         Gauss linear limited 0.777;

    // options = corrected, faceCorrected, limited, linearFit, orthogonal, quadraticFit, uncorrected

    // orthogonal: mainly limited for hexahedral meshes with no grading (a perfect mesh). Second order accurate, bounded on perfect meshes, without non-orthogonal corrections.

    // corrected, limited: for meshes with grading and non- orthogonality. Second order accurate, bounded depending on the quality of the mesh, with non-orthogonal corrections.

    // uncorrected: usually limited to hexahedral meshes with very low non-orthogonality. Second order accurate, without non-orthogonal corrections. Stable but more diffusive than the limited and corrected methods.

    // Mesh with some degree of non-orthogonality (low to medium) laplacianSchemes → limited 1 to 0.5

    // General unstructured meshes laplacianSchemes → limited 0.5

    // Gauss linear limited 1.0;
    // Gauss = Only option
    // linear = Interpolation method of the diffusion coefficient
    // limited 1.0 = Surface normal gradients discretization
    // 1 is equivalent to using the corrected method, This is approach is recommended for meshes with non-orthogonality less than 70 degrees.  the blending factor is used to avoid the non-orthogonal contribution exceeding the orthogonal part, the amount of correction applied to the non-orthogonal contribution is proportional to the blending coefficient 1.0 used in the limited approach.

//corrected = unbounded, second-order, conservative
//uncorrected	= bounded, first order, non-conservative
//limited ψ	 = blend of corrected and uncorrected
//bounded	= first-order for bounded scalars

//For maintaining accuracy, an explicit non-orthogonal correction can be added to the orthogonal component, known as the corrected scheme. The correction increases in size as the non-orthogonality increases.
//Beyond 70°, the explicit correction can be so large that it can cause a solution to become unstable. The solution can be then stabilized by applying the limited scheme which requires a coefficient ψ, 0 ≤ ψ ≤  1, where:

  //  ψ = 0 : corresponds to uncorrected,
    //ψ = 0.333 : non-orthogonal correction ≤ 0.5 × orthogonal part,
    //ψ = 0.5 : non-orthogonal correction ≤ orthogonal part,
    //ψ = 1 : corresponds to corrected.

//Usually, ψ is chosen to be 0.33 or 0.5, where:
  //  0.33 offers greater stability,
   // 0.5 greater accuracy.
}

interpolationSchemes // phi = f*phi.P + (1-f)*phi.N
{
    default         linear;
}

snGradSchemes // nf.grad(phi)
{
    default         limited 0.777; // The surface normal gradients terms usually use the same method as the one chosen for the Laplacian terms
}

wallDist
{
    method          meshWave;
}

// ************************************************************************* //
